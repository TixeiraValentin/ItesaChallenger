import Head from "next/head";
import { useState } from "react";
import {
  Box,
  Button,
  Container,
  Flex,
  Heading,
  Spinner,
  Text,
  VStack,
} from "@chakra-ui/react";
import ChatBox from "../components/Chat/ChatBox/ChatBox";
import ChatInput from "../components/Chat/ChatInput/ChatInput";
import { Message } from "../components/Chat/types";

export default function Home() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isFetchingStoredMessages, setIsFetchingStoredMessages] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [showStoredMessages, setShowStoredMessages] = useState(false);
  const [storedMessages, setStoredMessages] = useState<Message[]>([]);

  const handleSendMessage = async (newMessage: string) => {
    setIsLoading(true);
    const userMessageObject: Message = {
      text: newMessage,
      isBot: false,
      isLoading: true,
    };
    setMessages((prevMessages) => [...prevMessages, userMessageObject]);

    try {
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ message: newMessage }),
      });

      if (!response.ok) {
        throw new Error("Network response was not ok");
      }

      const { answer } = await response.json();

      const botMessageObject: Message = {
        text: answer,
        isBot: true,
        isLoading: false,
      };

      setMessages((prevMessages) =>
        prevMessages
          .map((msg) => ({ ...msg, isLoading: false }))
          .concat(botMessageObject)
      );
    } catch (error) {
      console.error("Error al enviar el mensaje:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchStoredMessages = async () => {
    if (showStoredMessages) {
      setShowStoredMessages(false);
      return;
    }
    setIsFetchingStoredMessages(true);
    try {
      const response = await fetch("/api/messages");
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      const data = await response.json();
      setStoredMessages(data.messages);
      setShowStoredMessages(true);
    } catch (error) {
      console.error("Error al cargar los mensajes almacenados:", error);
    } finally {
      setIsFetchingStoredMessages(false);
    }
  };

  return (
    <Box bg="gray.800" minH="100vh" py={20}>
      <Head>
        <title>Chat con IA</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex align="center" justify="center" h="full">
        <Container
          maxW="container.md"
          centerContent
          p={4}
          borderRadius="md"
          boxShadow="xl"
        >
          <VStack spacing={8} w="100%" maxW="container.md" align="center">
            <Heading color="blue.500">Chat con IA</Heading>
            <ChatBox messages={messages} />
            <ChatInput onSendMessage={handleSendMessage} />
            <Button
              onClick={fetchStoredMessages}
              isLoading={isFetchingStoredMessages}
              colorScheme="blue"
            >
              {isFetchingStoredMessages ? "Cargando mensajes" : "Mensajes Almacenados en MongoDB"}
            </Button>
            {isFetchingStoredMessages && (
              <Spinner
                size="xl"
                thickness="4px"
                speed="0.65s"
                color="blue.500"
              />
            )}
            {showStoredMessages && (
              <Box
                bg="gray.700"
                color="white"
                p={4}
                borderRadius="md"
                overflow="auto"
                width="full"
              >
                <Text fontSize="lg" whiteSpace="pre-wrap">
                  {JSON.stringify(storedMessages, null, 2)}
                </Text>
              </Box>
            )}
          </VStack>
        </Container>
      </Flex>
    </Box>
  );
}
